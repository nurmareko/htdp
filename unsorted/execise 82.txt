Exercise 82. Design the function compare-word. The function consumes two
three-letter words (see exercise 78). It produces a word that indicates
where the given ones agree and disagree. The function retains the content
of the structure fields if the two agree; otherwise it places #false in
the field of the resulting word. Hint The exercises mentions two tasks:
the comparison of words and the comparison of “letters.” 

(check-expect (comp-wrd (make-word3l "d" "o" "g") (make-word3l "d" "o" "g")) #t)
(check-expect (comp-wrd (make-word3l "d" "o" "g") (make-word3l #f #f #f)) #t)
(check-expect (comp-wrd (make-word3l "d" "o" #f) (make-word3l "d" "o" "g")) #t)
(check-expect (comp-wrd (make-word3l "d" "o" "g") 0) #f)

; Word3l Word3l -> Boolean
; compare if the given word are same structure type
; if yes give #true else #false
(define (comp-wrd a b)
  (and (word3l? a) (word3l? b)))

(check-expect (comp-lett (make-word3l "d" "o" "g") (make-word3l "d" "o" "g")) #t)
(check-expect (comp-lett (make-word3l "d" "o" "g") (make-word3l "f" "o" "g")) #f)
(check-expect (comp-lett (make-word3l "d" "o" "g") (make-word3l #f #f #f)) #f)
(check-expect (comp-lett (make-word3l #f "o" "g") (make-word3l #f "o" "g")) #t)

; Word3l Word3l -> Boolean
; compare each letter inside word if equal give #true else #false
(define (comp-lett a b)
  (and (equal? (word3l-1st a) (word3l-1st b))
       (equal? (word3l-2nd a) (word3l-2nd b))
       (equal? (word3l-3rd a) (word3l-3rd b))))


(check-expect (comp-wnl (make-word3l "d" "o" "g") (make-word3l "d" "o" "g")) (make-word3l "d" "o" "g"))
(check-expect (comp-wnl (make-word3l "d" "o" "g") (make-word3l "c" "a" "t")) #f)

; Word3l Word3l -> Word3l/#f
; compare both word and letter if equal give Word3l else #f
(define (comp-wnl a b)
  (if (and (comp-lett a b) (comp-wrd a b)) a #f))