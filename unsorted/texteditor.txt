(define TEXTSIZE 16)
(define TEXTCOLOR "black")
(define TEXTBOXWIDTH 200)
(define TEXTBOXHEIGHT 20)
(define TEXTBOUNDARY (- TEXTBOXHEIGHT 4))
(define TEXTBOX (empty-scene TEXTBOXWIDTH TEXTBOXHEIGHT))
(define CURSOR (rectangle 1 20 "solid" "red"))

(define-struct editor [pre post])
; An Editor is a structure:
;   (make-editor String String)
; interpretation (make-editor s t) describes an editor
; whose visible text is (string-append s t) with 
; the cursor displayed between s and t
;example:
(define ex1 (make-editor "hello" "world")) 
(define ex2 (make-editor "hello" "")) 
(define ex3 (make-editor "" "world")) 
(define ex4 (make-editor "" ""))
(define ex5 (make-editor "change the world my final m" ""))

; Editor -> Image
; render an image of text editor base on ed state
;(define (render ed)
;  (... TEXTBOX ...))
(check-expect (render ex1) (overlay/align "left" "center"
                 (beside (text "hello" TEXTSIZE TEXTCOLOR)
                         CURSOR
                         (text "world" TEXTSIZE TEXTCOLOR))
                 TEXTBOX))

(define (render ed)
  (overlay/align "left" "center"
                 (text-image (editor-pre ed) (editor-post ed))
                 TEXTBOX))

; Editor, KeyEvent -> Editor
; - add a single-character KeyEvent ke to the end of pre field ed
; - "\b" delete the last character on pre field of ed (if there any)
; - "left" move cursor left (if there any)
; - "right" move cursor right (if there any)
; - ignore other key
;(define (edit ed ke)
;  (cond [(= (string-length ke) 1)
;         ...]
;        [(equal? ke "\b")
;         ...]
;        [(or (equal? ke "left") (equal? "right"))
;         ...]
;        [else
;         ...]))

(check-expect (edit ex1 " ") (make-editor "hello " "world"))
(check-expect (edit ex2 " ") (make-editor "hello " ""))
(check-expect (edit ex3 " ") (make-editor " " "world"))
(check-expect (edit ex4 " ") (make-editor " " ""))
(check-expect (edit ex1 "0") (make-editor "hello0" "world"))
(check-expect (edit ex1 "\b") (make-editor "hell" "world"))
(check-expect (edit ex2 "\b") (make-editor "hell" ""))
(check-expect (edit ex3 "\b") (make-editor "" "world"))
(check-expect (edit ex4 "\b") (make-editor "" ""))
(check-expect (edit ex1 "left") (make-editor "hell" "oworld"))
(check-expect (edit ex2 "left") (make-editor "hell" "o"))
(check-expect (edit ex3 "left") (make-editor "" "world"))
(check-expect (edit ex4 "left") (make-editor "" ""))
(check-expect (edit ex1 "right") (make-editor "hellow" "orld"))
(check-expect (edit ex2 "right") (make-editor "hello" ""))
(check-expect (edit ex3 "right") (make-editor "w" "orld"))
(check-expect (edit ex4 "right") (make-editor "" ""))
(check-expect (edit ex1 "\t") (make-editor "hello" "world"))
(check-expect (edit ex1 "\r") (make-editor "hello" "world"))
(check-expect (edit ex1 "up") (make-editor "hello" "world"))
(check-expect (edit ex1 "down") (make-editor "hello" "world"))
(check-expect (edit ex1 "shift") (make-editor "hello" "world"))
(check-expect (edit ex5 "e") (make-editor "change the world my final m" ""))

(define (edit ed ke)
  (cond [(and (= (string-length ke) 1) (not (equal? ke "\b")) (not (equal? ke "\r")) (not (equal? ke "\t")))
         (if (>= (image-width (text-image (editor-pre ed) (editor-post ed))) (- TEXTBOXWIDTH 10))
             ed
             (make-editor (add-string (editor-pre ed) ke) (editor-post ed)))]
        [(equal? ke "\b")
         (if (= (string-length (editor-pre ed)) 0)
             ed
             (make-editor (string-delete (editor-pre ed) "last") (editor-post ed)))]
        [(equal? ke "left")
         (if (= (string-length (editor-pre ed)) 0)
             ed
             (make-editor (string-delete (editor-pre ed) "last") (add-string (string-sub (editor-pre ed) "last") (editor-post ed))))]
        [(equal? ke "right")
         (if (= (string-length (editor-post ed)) 0)
             ed
             (make-editor (add-string (editor-pre ed) (string-sub (editor-post ed) "first")) (string-delete (editor-post ed) "first")))]
        [else ed]))

; String String -> String
; append a with b
(check-expect (add-string "hello" " ") "hello ")
(check-expect (add-string " " "hello") " hello")
(define (add-string a b)
  (string-append a b))

; String String -> string
; delete str substring at chosen substring pos "first" or "last".
(check-expect (string-delete "hello" "first") "ello")
(check-expect (string-delete "hello" "last") "hell")
(define (string-delete str pos)
  (cond [(equal? pos "first")
         (substring str 1)]
        [(equal? pos "last")
         (substring str 0 (- (string-length str) 1))]))

; String -> String
; get str substring at chosen substring pos "first" or "last".
(check-expect (string-sub "hello" "first") "h")
(check-expect (string-sub "hello" "last") "o")
(define (string-sub str pos)
  (cond [(equal? pos "first")
         (substring str 0 1)]
        [(equal? pos "last")
         (substring str (- (string-length str) 1) (string-length str))]))

; Editor -> Editor
; Editor represents the state of the world.
(define (run ws)
  (big-bang ws
    [to-draw render]
    [on-key edit]))

; String String -> Image
; display text image of a, and b side by side with a cursor in between
(check-expect (text-image  "hello" "world") (beside (text "hello" TEXTSIZE TEXTCOLOR)
                                                    CURSOR
                                                    (text "world" TEXTSIZE TEXTCOLOR)))
(define (text-image a b)
  (beside (text a TEXTSIZE TEXTCOLOR)
          CURSOR
          (text b TEXTSIZE TEXTCOLOR)))
  